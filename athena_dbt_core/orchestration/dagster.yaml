---
scheduler:
  module: dagster.core.scheduler
  class: DagsterDaemonScheduler

run_coordinator:
  module: dagster.core.run_coordinator
  class: QueuedRunCoordinator

### Use this run config for an AWS deployment
# run_launcher:
#   module: dagster_aws.ecs
#   class: EcsRunLauncher
#   config:
#     # Optionally, specify the container name (defaults to 'run')
#     container_name: "dagster_run"

#     # Whether to include sidecars in the launched tasks
#     include_sidecars: true

#     # Use the current ECS task configuration for launching new tasks
#     use_current_ecs_task_config: true
#     secrets_tag: ""

### Use this config for local deployment
run_launcher:
  module: dagster_docker
  class: DockerRunLauncher
  config:
    env_vars:
      - DB_USERNAME
      - DB_PASSWORD
      - DB_NAME
      - DB_PORT
      - DB_HOST
    network: docker_network
    container_kwargs:
      volumes: # Make docker client accessible to any launched containers as well
        - /var/run/docker.sock:/var/run/docker.sock
        - /tmp/io_manager_storage:/tmp/io_manager_storage

run_storage:
  module: dagster_postgres.run_storage
  class: PostgresRunStorage
  config:
    postgres_db:
      hostname:
        env: DB_HOST
      username:
        env: DB_USERNAME
      password:
        env: DB_PASSWORD
      db_name:
        env: DB_NAME
      port:
        env: DB_PORT

schedule_storage:
  module: dagster_postgres.schedule_storage
  class: PostgresScheduleStorage
  config:
    postgres_db:
      hostname:
        env: DB_HOST
      username:
        env: DB_USERNAME
      password:
        env: DB_PASSWORD
      db_name:
        env: DB_NAME
      port:
        env: DB_PORT

event_log_storage:
  module: dagster_postgres.event_log
  class: PostgresEventLogStorage
  config:
    postgres_db:
      hostname:
        env: DB_HOST
      username:
        env: DB_USERNAME
      password:
        env: DB_PASSWORD
      db_name:
        env: DB_NAME
      port:
        env: DB_PORT

